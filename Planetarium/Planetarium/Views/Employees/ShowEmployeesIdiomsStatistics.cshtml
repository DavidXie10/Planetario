
@{
    ViewBag.Title = "Idiomas de los colaboradores";
}
<html>
<head>
    <title>@ViewBag.Title</title>
</head>
<body>
    <div class="container">
        <h1 style="margin:10px 0 20px 0;">Idiomas de los colaboradores</h1>
        <p style="margin:5px 0 15px 0;">Acá puede conocer los funcionarios que hablan los idiomas seleccionados.</p>

        <div class="row">
            <div class="col">
                <h5>Seleccione los idiomas</h5>
                <select class="form-select" id="languageSelect" onchange="addLanguageButton(this.value), updateIdiomsList()">
                    <option value="">Seleccione los idiomas</option>
                    @foreach (var language in ViewBag.Languages) {
                        <option value="@language">@language</option>
                    }
                </select>
            </div>
        </div>

        <div class="card" style="margin: 10px 0 10px 0">
            <div class="card-header">
                <h4 class="text-success text-center">Idiomas Seleccionados</h4>
            </div>

            <div class="card-body" id="languagesContainer" onclick="updateIdiomsList()">
            </div>

            <input type="text" name="inputLanguageString" id="inputLanguageString" value="" style="display: none;" />
        </div>

        <div class="text-center" style="display:none" id="idiomsIntersectionContainer">
            <button style="height: 3rem; width: 25%; font-size: 1.3rem;" id="idiomsIntersectionButton" class="btn btn-success" onclick="changeModalByIdiomsIntersection()" value="0" data-toggle="modal" data-target="#employeesModal"> Ver funcionarios <span id="count"></span> </button>
        </div>
        <div id="notFoundMessage" style="display: none;">
            <p style="color: black; text-align: center; font-size: 1.5rem">¡No existen funcionarios que hablen todos los idiomas seleccionados!</p>
        </div>

        <hr />

        <div class="row card">
            <div class="col card-header">
                <h4 class="text-center"> Estadísticas de idiomas del planetario </h4>
            </div>

            <div class="row card-body" id="allIdiomsListContainer" style="margin: 10px 0 0 0;">
                <div class="col-6">
                    <ul id="leftColumn"></ul>
                </div>

                <div class="col-6">
                    <ul id="rightColumn"></ul>
                </div>
            </div>
        </div>

        <div class="modal fade" id="employeesModal" tabindex="-1" role="dialog" aria-labelledby="employeesModalTitle" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title" id="exampleModalLongTitle"><strong>Funcionarios</strong></h3>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body" id="employees-list">
                    </div>
                </div>
            </div>
        </div>

    </div>

    <script src="~/Scripts/GenericMultiselect.js"></script>
    <script type="text/javascript">
        let multiSelectLanguages = new GenericMultiSelect("#languageSelect", "#languagesContainer", "#inputLanguageString");
    </script>

    <script type="text/javascript">
        const ALL_IDIOMS_LIST_CONTAINER = 'allIdiomsListContainer';
        const LEFT_COLUMN_LIST = 'leftColumn';
        const RIGHT_COLUMN_LIST = 'rightColumn';
        const EMPLOYEES_MODAL_BODY = 'employees-list';
        const INPUT_IDIOMS = 'inputLanguageString';
        const NOT_FOUND_MESSAGE = 'notFoundMessage';
        const IDIOMS_INTERSECTION_CONTAINER = 'idiomsIntersectionContainer';
        const SPAN_COUNT = 'count';

        let allEmployees = @Html.Raw(Json.Encode(@ViewBag.Employees));
        let languagesCount = @Html.Raw(Json.Encode(@ViewBag.LanguagesCount));
        let allIdioms = @Html.Raw(Json.Encode(@ViewBag.Languages));

        function updateIdiomsList() {            
            let idioms = getSelectedIdioms();
            let employeesBySelectedIdioms = getEmployeesByIdioms(idioms);
            let employeesCount = Object.keys(employeesBySelectedIdioms).length;
 
            if (employeesCount > 0) {
                hide(NOT_FOUND_MESSAGE);
                show(IDIOMS_INTERSECTION_CONTAINER);

                document.getElementById(SPAN_COUNT).innerHTML = ' (' + employeesCount + ')';
                setModal(employeesBySelectedIdioms);
            } else if (document.getElementById(INPUT_IDIOMS).value != "") {
                hide(IDIOMS_INTERSECTION_CONTAINER);
                show(NOT_FOUND_MESSAGE);
            } else {
                hide(IDIOMS_INTERSECTION_CONTAINER);
                hide(NOT_FOUND_MESSAGE);
            }
        }

        function getEmployeesByIdioms(idioms) {
            let checkedEmployees = {};
            for (let employee of allEmployees) {
                if (checkEmployeeIdioms(employee, idioms)) {
                    checkedEmployees[employee.FirstName + ' ' + employee.LastName] = employee.Dni;
                }
            }
            return checkedEmployees;
        }

        function setModal(employeesBySelectedIdioms) {
            let employeesList = document.getElementById(EMPLOYEES_MODAL_BODY);
            employeesList.innerHTML = "";
            let list = document.createElement('ul');
            for (let [name, dni] of Object.entries(employeesBySelectedIdioms)) {
                let listItem = document.createElement("li");
                listItem.innerHTML = '<a href="Employee?dni=' + dni + '" >' + name + '</a>';
                list.appendChild(listItem);
            }

            employeesList.appendChild(list);
        }

        function checkEmployeeIdioms(employee, idioms) {
            let counter = 0;
            for (let idiom of idioms) {
                counter += employee.Languages.includes(idiom) ? 1 : 0;
            }
            return counter == idioms.length;
        }

        function displayAllIdioms() {
            let half = Math.ceil(languagesCount / 2);
            let index = 0;
            index = displayColumList(0, half, LEFT_COLUMN_LIST);
            index = displayColumList(index, languagesCount, RIGHT_COLUMN_LIST);         
        }

        function displayColumList(initialIndex, lastIndex, column) {
            let index = 0;
            for (index = initialIndex; index < lastIndex; ++index) {
                let listItem = document.createElement("li");
                let employeesByLanguage = getEmployeesByIdiom(allIdioms[index]);
                let innerContent = '<p style="display: inline-block; width: 25%;">' + allIdioms[index] + ': ' + "</p>" + getButton(allIdioms[index], Object.entries(employeesByLanguage).length);
                listItem.innerHTML = innerContent;
                document.getElementById(column).appendChild(listItem);
            }

            return index;
        }

        function getEmployeesByIdiom(idiom) {
            let employees = {};
            for (let employee of allEmployees) {
                if (employee.Languages.includes(idiom)) {
                    employees[employee.FirstName + ' ' + employee.LastName] = employee.Dni;
                }
            }
            return employees;
        }

        function getButton(id, employeesCount) {
            let button = '<button type="button" id="' + id + '" class="btn btn-success" onclick="changeModal(this.id)" data-toggle="modal" data-target="#employeesModal">Ver funcionarios (' + employeesCount + ') </button>';
            return button;
        }

        function hideAllIdioms() {
            document.getElementById(LEFT_COLUMN_LIST).innerHTML = "";
            document.getElementById(RIGHT_COLUMN_LIST).innerHTML = "";
            hide(ALL_IDIOMS_LIST_CONTAINER);
        }

        function changeModal(id) {
            let employeesByLanguage = getEmployeesByIdiom(id);
            setModal(employeesByLanguage);
        }

        function changeModalByIdiomsIntersection() {
            let idioms = getSelectedIdioms();
            setModal(getEmployeesByIdioms(idioms));
        }

        function getSelectedIdioms() {
            let selectedIdioms = document.getElementById(INPUT_IDIOMS).value;
            selectedIdioms = String(selectedIdioms).replaceAll('_', ' ').substring(0, selectedIdioms.length - 1);
            let idioms = selectedIdioms.split('|');
            return idioms;
        }

        function show(id) {
            document.getElementById(id).style.display = "block";
        }

        function hide(id) {
            document.getElementById(id).style.display = "none";
        }

        displayAllIdioms();
    </script>
</body>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
</html>

<style>
    li {
        padding: 0.2rem;
    }
</style>