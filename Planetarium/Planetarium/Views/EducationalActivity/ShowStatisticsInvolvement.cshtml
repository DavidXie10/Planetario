<!DOCTYPE html>
<html>
<head>
    <title>Estadísticas por tema</title>
</head>
<body>
    <div class="container">
        <h1 style="margin:10px 0 20px 0;">Estadísticas de Involucramiento</h1>

        <h5>Seleccione las categorías</h5>
        <div class="btn-group">
            @foreach (var category in @ViewBag.TopicsByCategory) {
                <button class="btn btn-outline-success checkItemCategory" value="0" onclick="activeCheck(this, 1)">@category.Key</button>
            }

            <button style="margin-left: 20px" class="btn btn-success" value="0" onclick="activeAllButtonsFromRow('checkboxesCategories')">Todos</button>
            <button class="btn btn-secondary" value="0" onclick="clearAllButtonsFromRow('checkboxesCategories')">Limpiar</button>
        </div>

        <br />
        <br />

        @foreach (var category in @ViewBag.TopicsByCategory) {
            <h4> @category.Key </h4>
            <div class="btn-group">
                @foreach (var topic in category.Value) {
                    <button class="btn btn-outline-success checkItemTopic" value="0" onclick="activeCheck(this, 1)">@topic</button>
                }
            </div>
            <br />
            <br />
            /*@{
                string categoryId = "checkboxesTopics" + category.Key.Replace(" ", "-");
            }
            <button style="margin-left: 20px" class="btn btn-success" value="0" onclick="activeAllButtonsFromRow('@categoryId')">Todos</button>

            <button class="btn btn-secondary" value="0" onclick="clearAllButtonsFromRow('@categoryId')">Limpiar</button>*/
        }

        <div class="card text-white bg-success mb-3 text-center" style="margin:40px; max-width: 80rem;">
            <div class="card-body">
                <p class="card-title" style="font-size: 4rem"><strong>Asistencia al planetario</strong></p>
                <p id="result" class="card-text" style="font-size: 4rem"></p>
            </div>
        </div>

    </div>

    <script>
        let checkboxesTypes = {};
        checkboxesTypes["checkboxesCategories"] = document.getElementsByClassName("checkItemCategory");


        "checkboxesTopics" + category.Replace(" ", "-");
        checkboxesTypes["checkboxesTopics"] = document.getElementsByClassName("checkItemTopic");

        function activeCheck(target, index) {
            if (target.value == "0") {
                target.classList.remove("btn-outline-success");
                target.classList.add("btn-success");
                target.value = "1";
            } else {
                target.classList.remove("btn-success");
                target.classList.add("btn-outline-success");
                target.value = "0";
            }
            if (index == 1) {
                updateStatistics();
            }
        }

        function updateStatistics() {
            let result = 0;
            let selectedCategories = getListSelectedOptions("checkboxesCategories");
            result = getActivitiesParticipants(selectedDays, selectedComplexityLevels, selectedTargetAudiences);
            document.getElementById('result').innerHTML = result + (result != 1 ? " personas" : " persona");



        }

        function getActivitiesParticipants(selectedDays, selectedComplexityLevels, selectedTargetAudiences) {
            let participants = 0;

            if (selectedDays.length != 0 || selectedComplexityLevels.length != 0 || selectedTargetAudiences != 0) {
                for (let activity in activities) {
                    let existsDay = false;
                    let existsComplexityLevel = false;
                    let existsTargetAudience = false;

                    let activityDate = getDayName(activities[activity].StatisticsDate, 'es-ES');
                    existsDay = selectedDays.length == 0 || selectedDays.includes(activityDate);
                    if (existsDay) {
                        existsComplexityLevel = selectedComplexityLevels.length == 0 || selectedComplexityLevels.includes(activities[activity].ComplexityLevel);

                        if (existsComplexityLevel) {
                            let targetAudiences = activities[activity].TargetAudience;
                            let targetAudiencesCount = targetAudiences.length;
                            let targetElement = 0;
                            if (selectedTargetAudiences.length != 0) {
                                while (!existsTargetAudience && targetElement < targetAudiencesCount) {
                                    existsTargetAudience = selectedTargetAudiences.includes(targetAudiences[targetElement]);
                                    ++targetElement;
                                }
                            } else {
                                existsTargetAudience = true;
                            }
                        }
                    }
                    participants += existsDay && existsComplexityLevel && existsTargetAudience ? activities[activity].RegisteredParticipants : 0;
                }
            }
            return participants;
        }

        function getListSelectedOptions(checkboxType) {
            let selected = [];
            let checkboxes = checkboxesTypes[checkboxType];
            for (let checkbox = 0; checkbox < checkboxes.length; ++checkbox) {
                if (checkboxes[checkbox].value == '1') {
                    selected.push(checkboxes[checkbox].innerHTML);
                }
            }
            return selected;
        }

        function activeAllButtonsFromRow(checkboxType) {
            toggleButtons(checkboxType, "0");
        }

        function clearAllButtonsFromRow(checkboxType) {
            toggleButtons(checkboxType, "1");
        }

        function toggleButtons(checkboxType, value) {
            let checkboxes = checkboxesTypes[checkboxType];
            for (let checkbox = 0; checkbox < checkboxes.length; ++checkbox) {
                checkboxes[checkbox].value = value;
                activeCheck(checkboxes[checkbox], 0);
            }
            updateStatistics();
        }

        function executeAllCheckboxesTypes(callback) {
            callback("checkboxesCategories");
            callback("checkboxesTopics");
        }
    </script>




</body>
</html>
