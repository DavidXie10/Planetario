<!DOCTYPE html>
<html>
<head>
    <title>Estadísticas por tema</title>
    <script src="https://cdn.anychart.com/releases/8.0.0/js/anychart-base.min.js"></script>
</head>
<body>
    <div id="controllerURL" data-request-url="@Url.Action("GetTopicsList", "EducationalActivity")"></div>
    <div class="container">
        <h1 style="margin:10px 0 20px 0;">Estadísticas de Involucramiento</h1>
        <div class="row">
            <div class="col">
                <h5>Seleccione las categorías</h5>
                <br />
                @Html.DropDownList("Category", ViewData["category"] as List<SelectListItem>, "Seleccione la categoría", new { @class = "form-control", @onchange = "updateTopics(this.value), addCategoryButton(this.value), updateChart('inputCategoryString','categoriesChart',1)" })

                <br />
                <br />
                <div class="card" style="margin: 10px 0 10px 0">
                    <div class="card-header">
                        <h4 class="text-success text-center">Categorías seleccionadas</h4>
                    </div>
                    <div class="card-body" id="categoryContainer" onclick="deleteTopics(), updateChart('inputCategoryString', 'categoriesChart', 1)">
                    </div>
                    <input type="text" name="inputCategoryString" id="inputCategoryString" value="" style="display: none;" />
                </div>
                <div id="categoriesChart" style="height: 500px; width: 100%; display: none"></div>


                <br />
                <br />
                <div class="card" style="margin: 10px 0 10px 0">
                    <div class="card-header">
                        <h4 class="text-success text-center">Las 5 categorías menos seleccionadas</h4>
                    </div>
                    <div class="card-body" id="categoryDown"></div>
                </div>
            </div>

            <div class="col">
                <h5>Seleccione los tópicos</h5>
                <br />
                @Html.DropDownList("topicSelect", new SelectList(string.Empty, "Value", "Text"), "Seleccione los tópicos", new { @class = "form-control", @onchange = "addTopicButton(this.value), updateChart('inputTopicString', 'topicsChart', 0)" })

                <br />
                <br />
                <div class="card" style="margin: 10px 0 10px 0">
                    <div class="card-header">
                        <h4 class="text-success text-center">Tópicos seleccionados</h4>
                    </div>
                    <div class="card-body" id="topicsContainer" onclick="updateChart('inputTopicString', 'topicsChart', 0)">
                    </div>
                    <input type="text" name="inputTopicString" id="inputTopicString" value="" style="display: none;" />
                </div>
                <div id="topicsChart" style="height: 500px; width: 100%; display: none"></div>

                <br />
                <br />
                <div class="card" style="margin: 10px 0 10px 0">
                    <div class="card-header">
                        <h4 class="text-success text-center">Los 5 tópicos menos seleccionadas</h4>
                    </div>
                    <div class="card-body" id="topicDown"></div>
                </div>
            </div>
        </div>

    </div>

    <script src="~/Scripts/jquery-3.4.1.min.js"></script>
    <script src="~/Scripts/GenericMultiselect.js"></script>
    <script type="text/javascript">
        let multiSelectCategory = new GenericMultiSelect("#Category", "#categoryContainer", "#inputCategoryString");
        let multiSelectTopics = new GenericMultiSelect("#topicSelect", "#topicsContainer", "#inputTopicString");
    </script>
    <script type="text/javascript">
        let categoriesRank = @Html.Raw(Json.Encode(@ViewBag.CategoriesRank));
        let topicsRank = @Html.Raw(Json.Encode(@ViewBag.TopicsRank));

        let categoriesData = createChart(categoriesRank, "Ranking de Categorías", "categoriesChart");
        let topicsData = createChart(topicsRank, "Ranking de Tópicos", "topicsChart");

        function createChart(elementsRank, title, idChartContainer) {
            let items = Object.keys(elementsRank).map(function (key) {
                return [key, elementsRank[key]];
            });
            let chart = anychart.bar();
            let data = anychart.data.set(items);
            chart.labels(true);
            chart.bar(data);
            chart.title(title);
            chart.container(idChartContainer);
            chart.draw();
            return data;
        }

        function updateChart(inputElementString, idChartContainer, rankingType) {
            let selectedElements = document.getElementById(inputElementString).value;
            selectedElements = String(selectedElements).replaceAll('_', ' ');
            let chartData = (rankingType == 1) ? categoriesData : topicsData;
            let elementsRank = (rankingType == 1) ? categoriesRank : topicsRank;

            selectedElements = sortElements(selectedElements, elementsRank).substring(0, selectedElements.length - 1);
            removeAll(chartData, Object.keys(elementsRank).length);

            let words = selectedElements.split('|');
            let counter = 0;

            for (let word of words) {
                if (word != "") {
                    chartData.insert({ x: word, value: elementsRank[word] }, counter++);
                }
            }

            if (chartData.getRowsCount() == 0) {
                document.getElementById(idChartContainer).setAttribute("style", "height: 500px; width: 100%; display: none;");
            } else {
                document.getElementById(idChartContainer).setAttribute("style", "height: 500px; width: 100%; display: block;");
            }
        }

        function removeAll(chartData, length) {
            for (let element = 0; element < length; ++element ) {
                chartData.remove(0);
            }
        }

        function sortElements(selectedElements, rankType) {
            let rankedElements = "";
            for (let element in rankType) {
                if (selectedElements.search(element) != -1) {
                    rankedElements += element + "|";
                }
            }
            return rankedElements;
        }

        function downCategories() {
            document.getElementById('categoryDown').innerHTML = addToListLast(categoriesRank, 2);
            document.getElementById('topicDown').innerHTML = addToListLast(topicsRank, 5);
        }

        downCategories();

        function updateTopics(value) {
            let inputCategoryString = document.getElementById('inputCategoryString').value.replaceAll('_', ' ');
            
            if (value != '' && !inputCategoryString.includes(value)) {
                $.ajax({
                    type: 'POST',
                    url: $("#controllerURL").data("request-url"),
                    dataType: 'json',

                    data: { category: value },

                    success: function (topics) {
                        $.each(topics, function (i, topic) {
                            $("#topicSelect").append('<option class="' + String(value.replaceAll(" ", "_")) + '" value=' + topic.Value.replace(" ", "_") + '_(' + String(value.replaceAll(" ", "_")) + ')' + '>' + topic.Text + ' (' + value + ') ' + '</option>');
                        });
                    },
                    error: function (ex) {
                        alert('Fallo en la recuperación de tópicos' + ex);
                    }

                });
                return false;
            } 
        }

        function addToListLast(dictionary, down) {
            let listElements = "";
            for (var i = Object.keys(dictionary).length - 1; i >= (Object.keys(dictionary).length - down); --i) {
                listElements += "<li>" + Object.keys(dictionary)[i] + ": " + Object.values(dictionary)[i] + "</li>";
            }
            return listElements;
        }

        function deleteTopics() {
            let selectedElements = document.getElementById('inputCategoryString').value.replaceAll("_", " ");
            let containerChildren = document.getElementById('topicsContainer').children;

            for (const [category, value] of Object.entries(categoriesRank)) {
                if (!selectedElements.includes(category)) {
                    document.querySelectorAll("." + String(category.replaceAll(" ", "_"))).forEach(e => e.remove());
                    let count = containerChildren.length;
                    let index = 0;
                    while (index < count) {
                        let button = containerChildren[index];
                        if (button.tagName == "A") {
                            console.log("Button innerhtml: " + button.innerHTML);
                            console.log("Category: " + category);
                            if (button.innerHTML.includes(category)) {
                                button.click()
                                --index;
                            }
                        }
                        ++index;
                    }
                }
            }
        }

    </script>
</body>
</html>